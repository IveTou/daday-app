// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Board {
  id        String    @id @default(cuid())
  title     String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  columns   Column[]
  projects  Project[]
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
}

model Column {
  id      String    @id @default(cuid())
  name    String
  order   Int
  board   Board?    @relation(fields: [boardId], references: [id])
  boardId String?
  project Project[]
}

model Project {
  id          String     @id @default(cuid())
  title       String
  description String
  columns     Column     @relation(fields: [columnId], references: [id])
  author      User       @relation(fields: [userId], references: [id])
  tasks       Task[]
  team        Profile[]
  comments    Comment[]
  activity    Activity[]
  createdAt   DateTime   @default(now()) @map(name: "created_at")
  updatedAt   DateTime   @updatedAt @map(name: "updated_at")
  board       Board?     @relation(fields: [boardId], references: [id])
  boardId     String?
  columnId    String
  userId      String
}

model Task {
  id        String   @id @default(cuid())
  title     String
  status    Status   @default(IDLE)
  level     Int
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
}

model Profile {
  id        String     @id @default(cuid())
  name      String?
  email     String?    @unique
  addess    String?
  phone     String?
  createdAt DateTime   @default(now()) @map(name: "created_at")
  updatedAt DateTime   @updatedAt @map(name: "updated_at")
  project   Project?   @relation(fields: [projectId], references: [id])
  projectId String?
  user      User[]
  comment   Comment[]
  Activity  Activity[]
}

model User {
  id        String    @id @default(cuid())
  profile   Profile?  @relation(fields: [profileId], references: [id])
  profileId String?
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  role      Role      @default(USER)
  boards    Board[]
  project   Project[]
}

model Comment {
  id        String   @id @default(cuid())
  author    Profile  @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
}

model Activity {
  id          String   @id @default(cuid())
  author      Profile  @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")
  action      Action
  entity      Entities
  description String
  Project     Project? @relation(fields: [projectId], references: [id])
  projectId   String?
}

enum Action {
  CREATE
  DELETE
  UPDATE
}

enum Entities {
  BOARD
  TASK
  COLUMN
  COMMENT
  TITLE
  DESCRIPTION
}

enum Role {
  USER
  ADMIN
}

enum Status {
  IDLE
  INPROGRESS
  DONE
}
